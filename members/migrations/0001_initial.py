# Generated by Django 5.0.2 on 2025-01-17 12:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Candidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(max_length=255)),
                ('phone_number', models.CharField(max_length=20)),
                ('address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('is_kosovo_citizen', models.BooleanField(default=True)),
                ('social_profile_url', models.URLField(blank=True)),
                ('social_profile_url2', models.URLField(blank=True)),
                ('current_stage', models.CharField(choices=[('APPLIED', 'Application Submitted'), ('DOCUMENTS', 'Document Review'), ('INTERVIEW', 'Interview Stage'), ('LODGE_REVIEW', 'Lodge Review'), ('VOTING', 'Final Voting'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected')], default='APPLIED', max_length=50)),
                ('application_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('interview_date', models.DateTimeField(blank=True, null=True)),
                ('interview_passed', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-application_date'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('position', models.CharField(choices=[('FNMM', 'Grand Master'), ('ZFNMM', 'Deputy Grand Master'), ('FMB1', 'Senior Grand Warden'), ('FNMB2', 'Grand Junior Warden'), ('FNS', 'Grand Secretary'), ('FNT', 'Grand Treasurer'), ('FNO', 'Grand Orator'), ('MN', 'Worshipful Master'), ('MB1', 'Senior Warden'), ('MB2', 'Junior Warden'), ('SE', 'Secretary'), ('TR', 'Treasurer'), ('OR', 'Orator'), ('Antare', 'Regular Member')], default='MEMBER', max_length=20)),
                ('is_dignitary', models.BooleanField(default=False, help_text='Indicates if the user is one of the three dignitaries')),
                ('is_senior_member', models.BooleanField(default=False, help_text='Senior members have additional privileges')),
                ('is_lodge_member', models.BooleanField(default=False)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('file', models.FileField(upload_to='candidate_documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('verified', models.BooleanField(default=False)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.candidate')),
            ],
        ),
        migrations.CreateModel(
            name='Lodge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('members', models.ManyToManyField(related_name='lodges', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='primary_lodge',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_members', to='members.lodge'),
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.CharField(choices=[('APPROVE', 'Approve'), ('REJECT', 'Reject'), ('ABSTAIN', 'Abstain')], max_length=10)),
                ('vote_level', models.CharField(choices=[('LODGE', 'Lodge Level'), ('GRAND_LODGE', 'Grand Lodge Level')], default='LODGE', max_length=20)),
                ('stage', models.CharField(choices=[('APPLIED', 'Application Submitted'), ('DOCUMENTS', 'Document Review'), ('INTERVIEW', 'Interview Stage'), ('LODGE_REVIEW', 'Lodge Review'), ('VOTING', 'Final Voting'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('comments', models.TextField(blank=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.candidate')),
                ('lodge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.lodge')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('candidate', 'voter', 'stage', 'vote_level')},
            },
        ),
    ]
